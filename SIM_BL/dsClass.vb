'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On 

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(), _
 System.ComponentModel.DesignerCategoryAttribute("code"), _
 System.Diagnostics.DebuggerStepThrough(), _
 System.ComponentModel.ToolboxItem(True)> _
Public Class DsClass
    Inherits DataSet

    Private tableEjecutivos As EjecutivosDataTable

    Private tableLogos As LogosDataTable

    Public Sub New()
        MyBase.New()
        Me.InitClass()
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub

    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New()
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)), String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Ejecutivos")) Is Nothing) Then
                Me.Tables.Add(New EjecutivosDataTable(ds.Tables("Ejecutivos")))
            End If
            If (Not (ds.Tables("Logos")) Is Nothing) Then
                Me.Tables.Add(New LogosDataTable(ds.Tables("Logos")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.InitClass()
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub

    <System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property Ejecutivos() As EjecutivosDataTable
        Get
            Return Me.tableEjecutivos
        End Get
    End Property

    <System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property Logos() As LogosDataTable
        Get
            Return Me.tableLogos
        End Get
    End Property

    Public Overrides Function Clone() As DataSet
        Dim cln As DsClass = CType(MyBase.Clone, DsClass)
        cln.InitVars()
        Return cln
    End Function

    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return False
    End Function

    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return False
    End Function

    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset()
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Ejecutivos")) Is Nothing) Then
            Me.Tables.Add(New EjecutivosDataTable(ds.Tables("Ejecutivos")))
        End If
        If (Not (ds.Tables("Logos")) Is Nothing) Then
            Me.Tables.Add(New LogosDataTable(ds.Tables("Logos")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
        Me.InitVars()
    End Sub

    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function

    Friend Sub InitVars()
        Me.tableEjecutivos = CType(Me.Tables("Ejecutivos"), EjecutivosDataTable)
        If (Not (Me.tableEjecutivos) Is Nothing) Then
            Me.tableEjecutivos.InitVars()
        End If
        Me.tableLogos = CType(Me.Tables("Logos"), LogosDataTable)
        If (Not (Me.tableLogos) Is Nothing) Then
            Me.tableLogos.InitVars()
        End If
    End Sub

    Private Sub InitClass()
        Me.DataSetName = "DsPruebas"
        Me.Prefix = ""
        Me.Namespace = ""
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = False
        Me.EnforceConstraints = True
        Me.tableEjecutivos = New EjecutivosDataTable
        Me.Tables.Add(Me.tableEjecutivos)
        Me.tableLogos = New LogosDataTable
        Me.Tables.Add(Me.tableLogos)
    End Sub

    Private Function ShouldSerializeEjecutivos() As Boolean
        Return False
    End Function

    Private Function ShouldSerializeLogos() As Boolean
        Return False
    End Function

    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars()
        End If
    End Sub

    Public Delegate Sub EjecutivosRowChangeEventHandler(ByVal sender As Object, ByVal e As EjecutivosRowChangeEvent)

    Public Delegate Sub LogosRowChangeEventHandler(ByVal sender As Object, ByVal e As LogosRowChangeEvent)

    <System.Diagnostics.DebuggerStepThrough()> _
    Public Class EjecutivosDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable

        Private columnCodigoEjecutivo As DataColumn

        Private columnNombreEjecutivo As DataColumn

        Friend Sub New()
            MyBase.New("Ejecutivos")
            Me.InitClass()
        End Sub

        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub

        <System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        Friend ReadOnly Property CodigoEjecutivoColumn() As DataColumn
            Get
                Return Me.columnCodigoEjecutivo
            End Get
        End Property

        Friend ReadOnly Property NombreEjecutivoColumn() As DataColumn
            Get
                Return Me.columnNombreEjecutivo
            End Get
        End Property

        Default Public ReadOnly Property Item(ByVal index As Integer) As EjecutivosRow
            Get
                Return CType(Me.Rows(index), EjecutivosRow)
            End Get
        End Property

        Public Event EjecutivosRowChanged As EjecutivosRowChangeEventHandler

        Public Event EjecutivosRowChanging As EjecutivosRowChangeEventHandler

        Public Event EjecutivosRowDeleted As EjecutivosRowChangeEventHandler

        Public Event EjecutivosRowDeleting As EjecutivosRowChangeEventHandler

        Public Overloads Sub AddEjecutivosRow(ByVal row As EjecutivosRow)
            Me.Rows.Add(row)
        End Sub

        Public Overloads Function AddEjecutivosRow(ByVal CodigoEjecutivo As Decimal, ByVal NombreEjecutivo As String) As EjecutivosRow
            Dim rowEjecutivosRow As EjecutivosRow = CType(Me.NewRow, EjecutivosRow)
            rowEjecutivosRow.ItemArray = New Object() {CodigoEjecutivo, NombreEjecutivo}
            Me.Rows.Add(rowEjecutivosRow)
            Return rowEjecutivosRow
        End Function

        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        Public Overrides Function Clone() As DataTable
            Dim cln As EjecutivosDataTable = CType(MyBase.Clone, EjecutivosDataTable)
            cln.InitVars()
            Return cln
        End Function

        Protected Overrides Function CreateInstance() As DataTable
            Return New EjecutivosDataTable
        End Function

        Friend Sub InitVars()
            Me.columnCodigoEjecutivo = Me.Columns("CodigoEjecutivo")
            Me.columnNombreEjecutivo = Me.Columns("NombreEjecutivo")
        End Sub

        Private Sub InitClass()
            Me.columnCodigoEjecutivo = New DataColumn("CodigoEjecutivo", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodigoEjecutivo)
            Me.columnNombreEjecutivo = New DataColumn("NombreEjecutivo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombreEjecutivo)
        End Sub

        Public Function NewEjecutivosRow() As EjecutivosRow
            Return CType(Me.NewRow, EjecutivosRow)
        End Function

        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New EjecutivosRow(builder)
        End Function

        Protected Overrides Function GetRowType() As System.Type
            Return GetType(EjecutivosRow)
        End Function

        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EjecutivosRowChangedEvent) Is Nothing) Then
                RaiseEvent EjecutivosRowChanged(Me, New EjecutivosRowChangeEvent(CType(e.Row, EjecutivosRow), e.Action))
            End If
        End Sub

        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EjecutivosRowChangingEvent) Is Nothing) Then
                RaiseEvent EjecutivosRowChanging(Me, New EjecutivosRowChangeEvent(CType(e.Row, EjecutivosRow), e.Action))
            End If
        End Sub

        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EjecutivosRowDeletedEvent) Is Nothing) Then
                RaiseEvent EjecutivosRowDeleted(Me, New EjecutivosRowChangeEvent(CType(e.Row, EjecutivosRow), e.Action))
            End If
        End Sub

        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EjecutivosRowDeletingEvent) Is Nothing) Then
                RaiseEvent EjecutivosRowDeleting(Me, New EjecutivosRowChangeEvent(CType(e.Row, EjecutivosRow), e.Action))
            End If
        End Sub

        Public Sub RemoveEjecutivosRow(ByVal row As EjecutivosRow)
            Me.Rows.Remove(row)
        End Sub
    End Class

    <System.Diagnostics.DebuggerStepThrough()> _
    Public Class EjecutivosRow
        Inherits DataRow

        Private tableEjecutivos As EjecutivosDataTable

        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableEjecutivos = CType(Me.Table, EjecutivosDataTable)
        End Sub

        Public Property CodigoEjecutivo() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableEjecutivos.CodigoEjecutivoColumn), Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set(ByVal Value As Decimal)
                Me(Me.tableEjecutivos.CodigoEjecutivoColumn) = Value
            End Set
        End Property

        Public Property NombreEjecutivo() As String
            Get
                Try
                    Return CType(Me(Me.tableEjecutivos.NombreEjecutivoColumn), String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set(ByVal Value As String)
                Me(Me.tableEjecutivos.NombreEjecutivoColumn) = Value
            End Set
        End Property

        Public Function IsCodigoEjecutivoNull() As Boolean
            Return Me.IsNull(Me.tableEjecutivos.CodigoEjecutivoColumn)
        End Function

        Public Sub SetCodigoEjecutivoNull()
            Me(Me.tableEjecutivos.CodigoEjecutivoColumn) = System.Convert.DBNull
        End Sub

        Public Function IsNombreEjecutivoNull() As Boolean
            Return Me.IsNull(Me.tableEjecutivos.NombreEjecutivoColumn)
        End Function

        Public Sub SetNombreEjecutivoNull()
            Me(Me.tableEjecutivos.NombreEjecutivoColumn) = System.Convert.DBNull
        End Sub
    End Class

    <System.Diagnostics.DebuggerStepThrough()> _
    Public Class EjecutivosRowChangeEvent
        Inherits EventArgs

        Private eventRow As EjecutivosRow

        Private eventAction As DataRowAction

        Public Sub New(ByVal row As EjecutivosRow, ByVal action As DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        Public ReadOnly Property Row() As EjecutivosRow
            Get
                Return Me.eventRow
            End Get
        End Property

        Public ReadOnly Property Action() As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class

    <System.Diagnostics.DebuggerStepThrough()> _
    Public Class LogosDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable

        Private columnCodigoLogo As DataColumn

        Private columnDescripcion As DataColumn

        Private columnImagenLogo As DataColumn

        Friend Sub New()
            MyBase.New("Logos")
            Me.InitClass()
        End Sub

        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub

        <System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        Friend ReadOnly Property CodigoLogoColumn() As DataColumn
            Get
                Return Me.columnCodigoLogo
            End Get
        End Property

        Friend ReadOnly Property DescripcionColumn() As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property

        Friend ReadOnly Property ImagenLogoColumn() As DataColumn
            Get
                Return Me.columnImagenLogo
            End Get
        End Property

        Default Public ReadOnly Property Item(ByVal index As Integer) As LogosRow
            Get
                Return CType(Me.Rows(index), LogosRow)
            End Get
        End Property

        Public Event LogosRowChanged As LogosRowChangeEventHandler

        Public Event LogosRowChanging As LogosRowChangeEventHandler

        Public Event LogosRowDeleted As LogosRowChangeEventHandler

        Public Event LogosRowDeleting As LogosRowChangeEventHandler

        Public Overloads Sub AddLogosRow(ByVal row As LogosRow)
            Me.Rows.Add(row)
        End Sub

        Public Overloads Function AddLogosRow(ByVal CodigoLogo As Short, ByVal Descripcion As String, ByVal ImagenLogo() As Byte) As LogosRow
            Dim rowLogosRow As LogosRow = CType(Me.NewRow, LogosRow)
            rowLogosRow.ItemArray = New Object() {CodigoLogo, Descripcion, ImagenLogo}
            Me.Rows.Add(rowLogosRow)
            Return rowLogosRow
        End Function

        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        Public Overrides Function Clone() As DataTable
            Dim cln As LogosDataTable = CType(MyBase.Clone, LogosDataTable)
            cln.InitVars()
            Return cln
        End Function

        Protected Overrides Function CreateInstance() As DataTable
            Return New LogosDataTable
        End Function

        Friend Sub InitVars()
            Me.columnCodigoLogo = Me.Columns("CodigoLogo")
            Me.columnDescripcion = Me.Columns("Descripcion")
            Me.columnImagenLogo = Me.Columns("ImagenLogo")
        End Sub

        Private Sub InitClass()
            Me.columnCodigoLogo = New DataColumn("CodigoLogo", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodigoLogo)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
            Me.columnImagenLogo = New DataColumn("ImagenLogo", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImagenLogo)
            Me.columnCodigoLogo.Caption = "Código del Logotipo"
            Me.columnImagenLogo.Caption = "Imagen Logo"
        End Sub

        Public Function NewLogosRow() As LogosRow
            Return CType(Me.NewRow, LogosRow)
        End Function

        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New LogosRow(builder)
        End Function

        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LogosRow)
        End Function

        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LogosRowChangedEvent) Is Nothing) Then
                RaiseEvent LogosRowChanged(Me, New LogosRowChangeEvent(CType(e.Row, LogosRow), e.Action))
            End If
        End Sub

        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LogosRowChangingEvent) Is Nothing) Then
                RaiseEvent LogosRowChanging(Me, New LogosRowChangeEvent(CType(e.Row, LogosRow), e.Action))
            End If
        End Sub

        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LogosRowDeletedEvent) Is Nothing) Then
                RaiseEvent LogosRowDeleted(Me, New LogosRowChangeEvent(CType(e.Row, LogosRow), e.Action))
            End If
        End Sub

        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LogosRowDeletingEvent) Is Nothing) Then
                RaiseEvent LogosRowDeleting(Me, New LogosRowChangeEvent(CType(e.Row, LogosRow), e.Action))
            End If
        End Sub

        Public Sub RemoveLogosRow(ByVal row As LogosRow)
            Me.Rows.Remove(row)
        End Sub
    End Class

    <System.Diagnostics.DebuggerStepThrough()> _
    Public Class LogosRow
        Inherits DataRow

        Private tableLogos As LogosDataTable

        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableLogos = CType(Me.Table, LogosDataTable)
        End Sub

        Public Property CodigoLogo() As Short
            Get
                Try
                    Return CType(Me(Me.tableLogos.CodigoLogoColumn), Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set(ByVal Value As Short)
                Me(Me.tableLogos.CodigoLogoColumn) = Value
            End Set
        End Property

        Public Property Descripcion() As String
            Get
                Try
                    Return CType(Me(Me.tableLogos.DescripcionColumn), String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set(ByVal Value As String)
                Me(Me.tableLogos.DescripcionColumn) = Value
            End Set
        End Property

        Public Property ImagenLogo() As Byte()
            Get
                Try
                    Return CType(Me(Me.tableLogos.ImagenLogoColumn), Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set(ByVal Value As Byte())
                Me(Me.tableLogos.ImagenLogoColumn) = Value
            End Set
        End Property

        Public Function IsCodigoLogoNull() As Boolean
            Return Me.IsNull(Me.tableLogos.CodigoLogoColumn)
        End Function

        Public Sub SetCodigoLogoNull()
            Me(Me.tableLogos.CodigoLogoColumn) = System.Convert.DBNull
        End Sub

        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableLogos.DescripcionColumn)
        End Function

        Public Sub SetDescripcionNull()
            Me(Me.tableLogos.DescripcionColumn) = System.Convert.DBNull
        End Sub

        Public Function IsImagenLogoNull() As Boolean
            Return Me.IsNull(Me.tableLogos.ImagenLogoColumn)
        End Function

        Public Sub SetImagenLogoNull()
            Me(Me.tableLogos.ImagenLogoColumn) = System.Convert.DBNull
        End Sub
    End Class

    <System.Diagnostics.DebuggerStepThrough()> _
    Public Class LogosRowChangeEvent
        Inherits EventArgs

        Private eventRow As LogosRow

        Private eventAction As DataRowAction

        Public Sub New(ByVal row As LogosRow, ByVal action As DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        Public ReadOnly Property Row() As LogosRow
            Get
                Return Me.eventRow
            End Get
        End Property

        Public ReadOnly Property Action() As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
