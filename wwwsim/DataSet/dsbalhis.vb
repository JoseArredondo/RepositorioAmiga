'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsbalhis
    Inherits DataSet
    
    Private tablebalance1 As balance1DataTable
    
    Private tablebalance2 As balance2DataTable
    
    Private tablebalance3 As balance3DataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("balance1")) Is Nothing) Then
                Me.Tables.Add(New balance1DataTable(ds.Tables("balance1")))
            End If
            If (Not (ds.Tables("balance2")) Is Nothing) Then
                Me.Tables.Add(New balance2DataTable(ds.Tables("balance2")))
            End If
            If (Not (ds.Tables("balance3")) Is Nothing) Then
                Me.Tables.Add(New balance3DataTable(ds.Tables("balance3")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property balance1 As balance1DataTable
        Get
            Return Me.tablebalance1
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property balance2 As balance2DataTable
        Get
            Return Me.tablebalance2
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property balance3 As balance3DataTable
        Get
            Return Me.tablebalance3
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsbalhis = CType(MyBase.Clone,dsbalhis)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("balance1")) Is Nothing) Then
            Me.Tables.Add(New balance1DataTable(ds.Tables("balance1")))
        End If
        If (Not (ds.Tables("balance2")) Is Nothing) Then
            Me.Tables.Add(New balance2DataTable(ds.Tables("balance2")))
        End If
        If (Not (ds.Tables("balance3")) Is Nothing) Then
            Me.Tables.Add(New balance3DataTable(ds.Tables("balance3")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablebalance1 = CType(Me.Tables("balance1"),balance1DataTable)
        If (Not (Me.tablebalance1) Is Nothing) Then
            Me.tablebalance1.InitVars
        End If
        Me.tablebalance2 = CType(Me.Tables("balance2"),balance2DataTable)
        If (Not (Me.tablebalance2) Is Nothing) Then
            Me.tablebalance2.InitVars
        End If
        Me.tablebalance3 = CType(Me.Tables("balance3"),balance3DataTable)
        If (Not (Me.tablebalance3) Is Nothing) Then
            Me.tablebalance3.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsbalhis"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsbalhis.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablebalance1 = New balance1DataTable
        Me.Tables.Add(Me.tablebalance1)
        Me.tablebalance2 = New balance2DataTable
        Me.Tables.Add(Me.tablebalance2)
        Me.tablebalance3 = New balance3DataTable
        Me.Tables.Add(Me.tablebalance3)
    End Sub
    
    Private Function ShouldSerializebalance1() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializebalance2() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializebalance3() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub balance1RowChangeEventHandler(ByVal sender As Object, ByVal e As balance1RowChangeEvent)
    
    Public Delegate Sub balance2RowChangeEventHandler(ByVal sender As Object, ByVal e As balance2RowChangeEvent)
    
    Public Delegate Sub balance3RowChangeEventHandler(ByVal sender As Object, ByVal e As balance3RowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class balance1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columndevalua As DataColumn
        
        Private columnnactdis As DataColumn
        
        Private columnnctacob As DataColumn
        
        Private columnninvent As DataColumn
        
        Private columnnactfij As DataColumn
        
        Private columnnotract As DataColumn
        
        Private columnnprovee As DataColumn
        
        Private columnnotrpre As DataColumn
        
        Private columnncreins As DataColumn
        
        Private columnnpatri As DataColumn
        
        Private columnccodcli As DataColumn
        
        Friend Sub New()
            MyBase.New("balance1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property devaluaColumn As DataColumn
            Get
                Return Me.columndevalua
            End Get
        End Property
        
        Friend ReadOnly Property nactdisColumn As DataColumn
            Get
                Return Me.columnnactdis
            End Get
        End Property
        
        Friend ReadOnly Property nctacobColumn As DataColumn
            Get
                Return Me.columnnctacob
            End Get
        End Property
        
        Friend ReadOnly Property ninventColumn As DataColumn
            Get
                Return Me.columnninvent
            End Get
        End Property
        
        Friend ReadOnly Property nactfijColumn As DataColumn
            Get
                Return Me.columnnactfij
            End Get
        End Property
        
        Friend ReadOnly Property notractColumn As DataColumn
            Get
                Return Me.columnnotract
            End Get
        End Property
        
        Friend ReadOnly Property nproveeColumn As DataColumn
            Get
                Return Me.columnnprovee
            End Get
        End Property
        
        Friend ReadOnly Property notrpreColumn As DataColumn
            Get
                Return Me.columnnotrpre
            End Get
        End Property
        
        Friend ReadOnly Property ncreinsColumn As DataColumn
            Get
                Return Me.columnncreins
            End Get
        End Property
        
        Friend ReadOnly Property npatriColumn As DataColumn
            Get
                Return Me.columnnpatri
            End Get
        End Property
        
        Friend ReadOnly Property ccodcliColumn As DataColumn
            Get
                Return Me.columnccodcli
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As balance1Row
            Get
                Return CType(Me.Rows(index),balance1Row)
            End Get
        End Property
        
        Public Event balance1RowChanged As balance1RowChangeEventHandler
        
        Public Event balance1RowChanging As balance1RowChangeEventHandler
        
        Public Event balance1RowDeleted As balance1RowChangeEventHandler
        
        Public Event balance1RowDeleting As balance1RowChangeEventHandler
        
        Public Overloads Sub Addbalance1Row(ByVal row As balance1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addbalance1Row(ByVal devalua As Date, ByVal nactdis As Double, ByVal nctacob As Double, ByVal ninvent As Double, ByVal nactfij As Double, ByVal notract As Double, ByVal nprovee As Double, ByVal notrpre As Double, ByVal ncreins As Double, ByVal npatri As Double, ByVal ccodcli As String) As balance1Row
            Dim rowbalance1Row As balance1Row = CType(Me.NewRow,balance1Row)
            rowbalance1Row.ItemArray = New Object() {devalua, nactdis, nctacob, ninvent, nactfij, notract, nprovee, notrpre, ncreins, npatri, ccodcli}
            Me.Rows.Add(rowbalance1Row)
            Return rowbalance1Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As balance1DataTable = CType(MyBase.Clone,balance1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New balance1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columndevalua = Me.Columns("devalua")
            Me.columnnactdis = Me.Columns("nactdis")
            Me.columnnctacob = Me.Columns("nctacob")
            Me.columnninvent = Me.Columns("ninvent")
            Me.columnnactfij = Me.Columns("nactfij")
            Me.columnnotract = Me.Columns("notract")
            Me.columnnprovee = Me.Columns("nprovee")
            Me.columnnotrpre = Me.Columns("notrpre")
            Me.columnncreins = Me.Columns("ncreins")
            Me.columnnpatri = Me.Columns("npatri")
            Me.columnccodcli = Me.Columns("ccodcli")
        End Sub
        
        Private Sub InitClass()
            Me.columndevalua = New DataColumn("devalua", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndevalua)
            Me.columnnactdis = New DataColumn("nactdis", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnactdis)
            Me.columnnctacob = New DataColumn("nctacob", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnctacob)
            Me.columnninvent = New DataColumn("ninvent", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnninvent)
            Me.columnnactfij = New DataColumn("nactfij", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnactfij)
            Me.columnnotract = New DataColumn("notract", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnotract)
            Me.columnnprovee = New DataColumn("nprovee", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnprovee)
            Me.columnnotrpre = New DataColumn("notrpre", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnotrpre)
            Me.columnncreins = New DataColumn("ncreins", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnncreins)
            Me.columnnpatri = New DataColumn("npatri", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnpatri)
            Me.columnccodcli = New DataColumn("ccodcli", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnccodcli)
        End Sub
        
        Public Function Newbalance1Row() As balance1Row
            Return CType(Me.NewRow,balance1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New balance1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(balance1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.balance1RowChangedEvent) Is Nothing) Then
                RaiseEvent balance1RowChanged(Me, New balance1RowChangeEvent(CType(e.Row,balance1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.balance1RowChangingEvent) Is Nothing) Then
                RaiseEvent balance1RowChanging(Me, New balance1RowChangeEvent(CType(e.Row,balance1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.balance1RowDeletedEvent) Is Nothing) Then
                RaiseEvent balance1RowDeleted(Me, New balance1RowChangeEvent(CType(e.Row,balance1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.balance1RowDeletingEvent) Is Nothing) Then
                RaiseEvent balance1RowDeleting(Me, New balance1RowChangeEvent(CType(e.Row,balance1Row), e.Action))
            End If
        End Sub
        
        Public Sub Removebalance1Row(ByVal row As balance1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class balance1Row
        Inherits DataRow
        
        Private tablebalance1 As balance1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablebalance1 = CType(Me.Table,balance1DataTable)
        End Sub
        
        Public Property devalua As Date
            Get
                Try 
                    Return CType(Me(Me.tablebalance1.devaluaColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance1.devaluaColumn) = value
            End Set
        End Property
        
        Public Property nactdis As Double
            Get
                Try 
                    Return CType(Me(Me.tablebalance1.nactdisColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance1.nactdisColumn) = value
            End Set
        End Property
        
        Public Property nctacob As Double
            Get
                Try 
                    Return CType(Me(Me.tablebalance1.nctacobColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance1.nctacobColumn) = value
            End Set
        End Property
        
        Public Property ninvent As Double
            Get
                Try 
                    Return CType(Me(Me.tablebalance1.ninventColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance1.ninventColumn) = value
            End Set
        End Property
        
        Public Property nactfij As Double
            Get
                Try 
                    Return CType(Me(Me.tablebalance1.nactfijColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance1.nactfijColumn) = value
            End Set
        End Property
        
        Public Property notract As Double
            Get
                Try 
                    Return CType(Me(Me.tablebalance1.notractColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance1.notractColumn) = value
            End Set
        End Property
        
        Public Property nprovee As Double
            Get
                Try 
                    Return CType(Me(Me.tablebalance1.nproveeColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance1.nproveeColumn) = value
            End Set
        End Property
        
        Public Property notrpre As Double
            Get
                Try 
                    Return CType(Me(Me.tablebalance1.notrpreColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance1.notrpreColumn) = value
            End Set
        End Property
        
        Public Property ncreins As Double
            Get
                Try 
                    Return CType(Me(Me.tablebalance1.ncreinsColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance1.ncreinsColumn) = value
            End Set
        End Property
        
        Public Property npatri As Double
            Get
                Try 
                    Return CType(Me(Me.tablebalance1.npatriColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance1.npatriColumn) = value
            End Set
        End Property
        
        Public Property ccodcli As String
            Get
                Try 
                    Return CType(Me(Me.tablebalance1.ccodcliColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance1.ccodcliColumn) = value
            End Set
        End Property
        
        Public Function IsdevaluaNull() As Boolean
            Return Me.IsNull(Me.tablebalance1.devaluaColumn)
        End Function
        
        Public Sub SetdevaluaNull()
            Me(Me.tablebalance1.devaluaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnactdisNull() As Boolean
            Return Me.IsNull(Me.tablebalance1.nactdisColumn)
        End Function
        
        Public Sub SetnactdisNull()
            Me(Me.tablebalance1.nactdisColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnctacobNull() As Boolean
            Return Me.IsNull(Me.tablebalance1.nctacobColumn)
        End Function
        
        Public Sub SetnctacobNull()
            Me(Me.tablebalance1.nctacobColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsninventNull() As Boolean
            Return Me.IsNull(Me.tablebalance1.ninventColumn)
        End Function
        
        Public Sub SetninventNull()
            Me(Me.tablebalance1.ninventColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnactfijNull() As Boolean
            Return Me.IsNull(Me.tablebalance1.nactfijColumn)
        End Function
        
        Public Sub SetnactfijNull()
            Me(Me.tablebalance1.nactfijColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnotractNull() As Boolean
            Return Me.IsNull(Me.tablebalance1.notractColumn)
        End Function
        
        Public Sub SetnotractNull()
            Me(Me.tablebalance1.notractColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnproveeNull() As Boolean
            Return Me.IsNull(Me.tablebalance1.nproveeColumn)
        End Function
        
        Public Sub SetnproveeNull()
            Me(Me.tablebalance1.nproveeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnotrpreNull() As Boolean
            Return Me.IsNull(Me.tablebalance1.notrpreColumn)
        End Function
        
        Public Sub SetnotrpreNull()
            Me(Me.tablebalance1.notrpreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsncreinsNull() As Boolean
            Return Me.IsNull(Me.tablebalance1.ncreinsColumn)
        End Function
        
        Public Sub SetncreinsNull()
            Me(Me.tablebalance1.ncreinsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnpatriNull() As Boolean
            Return Me.IsNull(Me.tablebalance1.npatriColumn)
        End Function
        
        Public Sub SetnpatriNull()
            Me(Me.tablebalance1.npatriColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsccodcliNull() As Boolean
            Return Me.IsNull(Me.tablebalance1.ccodcliColumn)
        End Function
        
        Public Sub SetccodcliNull()
            Me(Me.tablebalance1.ccodcliColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class balance1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As balance1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As balance1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As balance1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class balance2DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columndevalua As DataColumn
        
        Private columnnactdis As DataColumn
        
        Private columnnctacob As DataColumn
        
        Private columnninvent As DataColumn
        
        Private columnnactfij As DataColumn
        
        Private columnnotract As DataColumn
        
        Private columnnprovee As DataColumn
        
        Private columnnotrpre As DataColumn
        
        Private columnncreins As DataColumn
        
        Private columnccodcli As DataColumn
        
        Friend Sub New()
            MyBase.New("balance2")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property devaluaColumn As DataColumn
            Get
                Return Me.columndevalua
            End Get
        End Property
        
        Friend ReadOnly Property nactdisColumn As DataColumn
            Get
                Return Me.columnnactdis
            End Get
        End Property
        
        Friend ReadOnly Property nctacobColumn As DataColumn
            Get
                Return Me.columnnctacob
            End Get
        End Property
        
        Friend ReadOnly Property ninventColumn As DataColumn
            Get
                Return Me.columnninvent
            End Get
        End Property
        
        Friend ReadOnly Property nactfijColumn As DataColumn
            Get
                Return Me.columnnactfij
            End Get
        End Property
        
        Friend ReadOnly Property notractColumn As DataColumn
            Get
                Return Me.columnnotract
            End Get
        End Property
        
        Friend ReadOnly Property nproveeColumn As DataColumn
            Get
                Return Me.columnnprovee
            End Get
        End Property
        
        Friend ReadOnly Property notrpreColumn As DataColumn
            Get
                Return Me.columnnotrpre
            End Get
        End Property
        
        Friend ReadOnly Property ncreinsColumn As DataColumn
            Get
                Return Me.columnncreins
            End Get
        End Property
        
        Friend ReadOnly Property ccodcliColumn As DataColumn
            Get
                Return Me.columnccodcli
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As balance2Row
            Get
                Return CType(Me.Rows(index),balance2Row)
            End Get
        End Property
        
        Public Event balance2RowChanged As balance2RowChangeEventHandler
        
        Public Event balance2RowChanging As balance2RowChangeEventHandler
        
        Public Event balance2RowDeleted As balance2RowChangeEventHandler
        
        Public Event balance2RowDeleting As balance2RowChangeEventHandler
        
        Public Overloads Sub Addbalance2Row(ByVal row As balance2Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addbalance2Row(ByVal devalua As Date, ByVal nactdis As Double, ByVal nctacob As Double, ByVal ninvent As Double, ByVal nactfij As Double, ByVal notract As Double, ByVal nprovee As Double, ByVal notrpre As Double, ByVal ncreins As Double, ByVal ccodcli As String) As balance2Row
            Dim rowbalance2Row As balance2Row = CType(Me.NewRow,balance2Row)
            rowbalance2Row.ItemArray = New Object() {devalua, nactdis, nctacob, ninvent, nactfij, notract, nprovee, notrpre, ncreins, ccodcli}
            Me.Rows.Add(rowbalance2Row)
            Return rowbalance2Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As balance2DataTable = CType(MyBase.Clone,balance2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New balance2DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columndevalua = Me.Columns("devalua")
            Me.columnnactdis = Me.Columns("nactdis")
            Me.columnnctacob = Me.Columns("nctacob")
            Me.columnninvent = Me.Columns("ninvent")
            Me.columnnactfij = Me.Columns("nactfij")
            Me.columnnotract = Me.Columns("notract")
            Me.columnnprovee = Me.Columns("nprovee")
            Me.columnnotrpre = Me.Columns("notrpre")
            Me.columnncreins = Me.Columns("ncreins")
            Me.columnccodcli = Me.Columns("ccodcli")
        End Sub
        
        Private Sub InitClass()
            Me.columndevalua = New DataColumn("devalua", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndevalua)
            Me.columnnactdis = New DataColumn("nactdis", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnactdis)
            Me.columnnctacob = New DataColumn("nctacob", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnctacob)
            Me.columnninvent = New DataColumn("ninvent", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnninvent)
            Me.columnnactfij = New DataColumn("nactfij", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnactfij)
            Me.columnnotract = New DataColumn("notract", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnotract)
            Me.columnnprovee = New DataColumn("nprovee", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnprovee)
            Me.columnnotrpre = New DataColumn("notrpre", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnotrpre)
            Me.columnncreins = New DataColumn("ncreins", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnncreins)
            Me.columnccodcli = New DataColumn("ccodcli", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnccodcli)
        End Sub
        
        Public Function Newbalance2Row() As balance2Row
            Return CType(Me.NewRow,balance2Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New balance2Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(balance2Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.balance2RowChangedEvent) Is Nothing) Then
                RaiseEvent balance2RowChanged(Me, New balance2RowChangeEvent(CType(e.Row,balance2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.balance2RowChangingEvent) Is Nothing) Then
                RaiseEvent balance2RowChanging(Me, New balance2RowChangeEvent(CType(e.Row,balance2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.balance2RowDeletedEvent) Is Nothing) Then
                RaiseEvent balance2RowDeleted(Me, New balance2RowChangeEvent(CType(e.Row,balance2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.balance2RowDeletingEvent) Is Nothing) Then
                RaiseEvent balance2RowDeleting(Me, New balance2RowChangeEvent(CType(e.Row,balance2Row), e.Action))
            End If
        End Sub
        
        Public Sub Removebalance2Row(ByVal row As balance2Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class balance2Row
        Inherits DataRow
        
        Private tablebalance2 As balance2DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablebalance2 = CType(Me.Table,balance2DataTable)
        End Sub
        
        Public Property devalua As Date
            Get
                Try 
                    Return CType(Me(Me.tablebalance2.devaluaColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance2.devaluaColumn) = value
            End Set
        End Property
        
        Public Property nactdis As Double
            Get
                Try 
                    Return CType(Me(Me.tablebalance2.nactdisColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance2.nactdisColumn) = value
            End Set
        End Property
        
        Public Property nctacob As Double
            Get
                Try 
                    Return CType(Me(Me.tablebalance2.nctacobColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance2.nctacobColumn) = value
            End Set
        End Property
        
        Public Property ninvent As Double
            Get
                Try 
                    Return CType(Me(Me.tablebalance2.ninventColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance2.ninventColumn) = value
            End Set
        End Property
        
        Public Property nactfij As Double
            Get
                Try 
                    Return CType(Me(Me.tablebalance2.nactfijColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance2.nactfijColumn) = value
            End Set
        End Property
        
        Public Property notract As Double
            Get
                Try 
                    Return CType(Me(Me.tablebalance2.notractColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance2.notractColumn) = value
            End Set
        End Property
        
        Public Property nprovee As Double
            Get
                Try 
                    Return CType(Me(Me.tablebalance2.nproveeColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance2.nproveeColumn) = value
            End Set
        End Property
        
        Public Property notrpre As Double
            Get
                Try 
                    Return CType(Me(Me.tablebalance2.notrpreColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance2.notrpreColumn) = value
            End Set
        End Property
        
        Public Property ncreins As Double
            Get
                Try 
                    Return CType(Me(Me.tablebalance2.ncreinsColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance2.ncreinsColumn) = value
            End Set
        End Property
        
        Public Property ccodcli As String
            Get
                Try 
                    Return CType(Me(Me.tablebalance2.ccodcliColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance2.ccodcliColumn) = value
            End Set
        End Property
        
        Public Function IsdevaluaNull() As Boolean
            Return Me.IsNull(Me.tablebalance2.devaluaColumn)
        End Function
        
        Public Sub SetdevaluaNull()
            Me(Me.tablebalance2.devaluaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnactdisNull() As Boolean
            Return Me.IsNull(Me.tablebalance2.nactdisColumn)
        End Function
        
        Public Sub SetnactdisNull()
            Me(Me.tablebalance2.nactdisColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnctacobNull() As Boolean
            Return Me.IsNull(Me.tablebalance2.nctacobColumn)
        End Function
        
        Public Sub SetnctacobNull()
            Me(Me.tablebalance2.nctacobColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsninventNull() As Boolean
            Return Me.IsNull(Me.tablebalance2.ninventColumn)
        End Function
        
        Public Sub SetninventNull()
            Me(Me.tablebalance2.ninventColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnactfijNull() As Boolean
            Return Me.IsNull(Me.tablebalance2.nactfijColumn)
        End Function
        
        Public Sub SetnactfijNull()
            Me(Me.tablebalance2.nactfijColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnotractNull() As Boolean
            Return Me.IsNull(Me.tablebalance2.notractColumn)
        End Function
        
        Public Sub SetnotractNull()
            Me(Me.tablebalance2.notractColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnproveeNull() As Boolean
            Return Me.IsNull(Me.tablebalance2.nproveeColumn)
        End Function
        
        Public Sub SetnproveeNull()
            Me(Me.tablebalance2.nproveeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnotrpreNull() As Boolean
            Return Me.IsNull(Me.tablebalance2.notrpreColumn)
        End Function
        
        Public Sub SetnotrpreNull()
            Me(Me.tablebalance2.notrpreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsncreinsNull() As Boolean
            Return Me.IsNull(Me.tablebalance2.ncreinsColumn)
        End Function
        
        Public Sub SetncreinsNull()
            Me(Me.tablebalance2.ncreinsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsccodcliNull() As Boolean
            Return Me.IsNull(Me.tablebalance2.ccodcliColumn)
        End Function
        
        Public Sub SetccodcliNull()
            Me(Me.tablebalance2.ccodcliColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class balance2RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As balance2Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As balance2Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As balance2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class balance3DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columndevalu As DataColumn
        
        Private columnnactdis As DataColumn
        
        Private columnnctacob As DataColumn
        
        Private columnninvent As DataColumn
        
        Private columnnactfij As DataColumn
        
        Private columnnotract As DataColumn
        
        Private columnnprovee As DataColumn
        
        Private columnnotrpre As DataColumn
        
        Private columnncreins As DataColumn
        
        Private columnnpatri As DataColumn
        
        Private columnccodcli As DataColumn
        
        Friend Sub New()
            MyBase.New("balance3")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property devaluColumn As DataColumn
            Get
                Return Me.columndevalu
            End Get
        End Property
        
        Friend ReadOnly Property nactdisColumn As DataColumn
            Get
                Return Me.columnnactdis
            End Get
        End Property
        
        Friend ReadOnly Property nctacobColumn As DataColumn
            Get
                Return Me.columnnctacob
            End Get
        End Property
        
        Friend ReadOnly Property ninventColumn As DataColumn
            Get
                Return Me.columnninvent
            End Get
        End Property
        
        Friend ReadOnly Property nactfijColumn As DataColumn
            Get
                Return Me.columnnactfij
            End Get
        End Property
        
        Friend ReadOnly Property notractColumn As DataColumn
            Get
                Return Me.columnnotract
            End Get
        End Property
        
        Friend ReadOnly Property nproveeColumn As DataColumn
            Get
                Return Me.columnnprovee
            End Get
        End Property
        
        Friend ReadOnly Property notrpreColumn As DataColumn
            Get
                Return Me.columnnotrpre
            End Get
        End Property
        
        Friend ReadOnly Property ncreinsColumn As DataColumn
            Get
                Return Me.columnncreins
            End Get
        End Property
        
        Friend ReadOnly Property npatriColumn As DataColumn
            Get
                Return Me.columnnpatri
            End Get
        End Property
        
        Friend ReadOnly Property ccodcliColumn As DataColumn
            Get
                Return Me.columnccodcli
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As balance3Row
            Get
                Return CType(Me.Rows(index),balance3Row)
            End Get
        End Property
        
        Public Event balance3RowChanged As balance3RowChangeEventHandler
        
        Public Event balance3RowChanging As balance3RowChangeEventHandler
        
        Public Event balance3RowDeleted As balance3RowChangeEventHandler
        
        Public Event balance3RowDeleting As balance3RowChangeEventHandler
        
        Public Overloads Sub Addbalance3Row(ByVal row As balance3Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addbalance3Row(ByVal devalu As Date, ByVal nactdis As Double, ByVal nctacob As Double, ByVal ninvent As Double, ByVal nactfij As Double, ByVal notract As Double, ByVal nprovee As Double, ByVal notrpre As Double, ByVal ncreins As Double, ByVal npatri As Double, ByVal ccodcli As String) As balance3Row
            Dim rowbalance3Row As balance3Row = CType(Me.NewRow,balance3Row)
            rowbalance3Row.ItemArray = New Object() {devalu, nactdis, nctacob, ninvent, nactfij, notract, nprovee, notrpre, ncreins, npatri, ccodcli}
            Me.Rows.Add(rowbalance3Row)
            Return rowbalance3Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As balance3DataTable = CType(MyBase.Clone,balance3DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New balance3DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columndevalu = Me.Columns("devalu")
            Me.columnnactdis = Me.Columns("nactdis")
            Me.columnnctacob = Me.Columns("nctacob")
            Me.columnninvent = Me.Columns("ninvent")
            Me.columnnactfij = Me.Columns("nactfij")
            Me.columnnotract = Me.Columns("notract")
            Me.columnnprovee = Me.Columns("nprovee")
            Me.columnnotrpre = Me.Columns("notrpre")
            Me.columnncreins = Me.Columns("ncreins")
            Me.columnnpatri = Me.Columns("npatri")
            Me.columnccodcli = Me.Columns("ccodcli")
        End Sub
        
        Private Sub InitClass()
            Me.columndevalu = New DataColumn("devalu", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndevalu)
            Me.columnnactdis = New DataColumn("nactdis", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnactdis)
            Me.columnnctacob = New DataColumn("nctacob", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnctacob)
            Me.columnninvent = New DataColumn("ninvent", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnninvent)
            Me.columnnactfij = New DataColumn("nactfij", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnactfij)
            Me.columnnotract = New DataColumn("notract", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnotract)
            Me.columnnprovee = New DataColumn("nprovee", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnprovee)
            Me.columnnotrpre = New DataColumn("notrpre", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnotrpre)
            Me.columnncreins = New DataColumn("ncreins", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnncreins)
            Me.columnnpatri = New DataColumn("npatri", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnpatri)
            Me.columnccodcli = New DataColumn("ccodcli", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnccodcli)
        End Sub
        
        Public Function Newbalance3Row() As balance3Row
            Return CType(Me.NewRow,balance3Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New balance3Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(balance3Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.balance3RowChangedEvent) Is Nothing) Then
                RaiseEvent balance3RowChanged(Me, New balance3RowChangeEvent(CType(e.Row,balance3Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.balance3RowChangingEvent) Is Nothing) Then
                RaiseEvent balance3RowChanging(Me, New balance3RowChangeEvent(CType(e.Row,balance3Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.balance3RowDeletedEvent) Is Nothing) Then
                RaiseEvent balance3RowDeleted(Me, New balance3RowChangeEvent(CType(e.Row,balance3Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.balance3RowDeletingEvent) Is Nothing) Then
                RaiseEvent balance3RowDeleting(Me, New balance3RowChangeEvent(CType(e.Row,balance3Row), e.Action))
            End If
        End Sub
        
        Public Sub Removebalance3Row(ByVal row As balance3Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class balance3Row
        Inherits DataRow
        
        Private tablebalance3 As balance3DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablebalance3 = CType(Me.Table,balance3DataTable)
        End Sub
        
        Public Property devalu As Date
            Get
                Try 
                    Return CType(Me(Me.tablebalance3.devaluColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance3.devaluColumn) = value
            End Set
        End Property
        
        Public Property nactdis As Double
            Get
                Try 
                    Return CType(Me(Me.tablebalance3.nactdisColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance3.nactdisColumn) = value
            End Set
        End Property
        
        Public Property nctacob As Double
            Get
                Try 
                    Return CType(Me(Me.tablebalance3.nctacobColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance3.nctacobColumn) = value
            End Set
        End Property
        
        Public Property ninvent As Double
            Get
                Try 
                    Return CType(Me(Me.tablebalance3.ninventColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance3.ninventColumn) = value
            End Set
        End Property
        
        Public Property nactfij As Double
            Get
                Try 
                    Return CType(Me(Me.tablebalance3.nactfijColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance3.nactfijColumn) = value
            End Set
        End Property
        
        Public Property notract As Double
            Get
                Try 
                    Return CType(Me(Me.tablebalance3.notractColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance3.notractColumn) = value
            End Set
        End Property
        
        Public Property nprovee As Double
            Get
                Try 
                    Return CType(Me(Me.tablebalance3.nproveeColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance3.nproveeColumn) = value
            End Set
        End Property
        
        Public Property notrpre As Double
            Get
                Try 
                    Return CType(Me(Me.tablebalance3.notrpreColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance3.notrpreColumn) = value
            End Set
        End Property
        
        Public Property ncreins As Double
            Get
                Try 
                    Return CType(Me(Me.tablebalance3.ncreinsColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance3.ncreinsColumn) = value
            End Set
        End Property
        
        Public Property npatri As Double
            Get
                Try 
                    Return CType(Me(Me.tablebalance3.npatriColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance3.npatriColumn) = value
            End Set
        End Property
        
        Public Property ccodcli As String
            Get
                Try 
                    Return CType(Me(Me.tablebalance3.ccodcliColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance3.ccodcliColumn) = value
            End Set
        End Property
        
        Public Function IsdevaluNull() As Boolean
            Return Me.IsNull(Me.tablebalance3.devaluColumn)
        End Function
        
        Public Sub SetdevaluNull()
            Me(Me.tablebalance3.devaluColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnactdisNull() As Boolean
            Return Me.IsNull(Me.tablebalance3.nactdisColumn)
        End Function
        
        Public Sub SetnactdisNull()
            Me(Me.tablebalance3.nactdisColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnctacobNull() As Boolean
            Return Me.IsNull(Me.tablebalance3.nctacobColumn)
        End Function
        
        Public Sub SetnctacobNull()
            Me(Me.tablebalance3.nctacobColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsninventNull() As Boolean
            Return Me.IsNull(Me.tablebalance3.ninventColumn)
        End Function
        
        Public Sub SetninventNull()
            Me(Me.tablebalance3.ninventColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnactfijNull() As Boolean
            Return Me.IsNull(Me.tablebalance3.nactfijColumn)
        End Function
        
        Public Sub SetnactfijNull()
            Me(Me.tablebalance3.nactfijColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnotractNull() As Boolean
            Return Me.IsNull(Me.tablebalance3.notractColumn)
        End Function
        
        Public Sub SetnotractNull()
            Me(Me.tablebalance3.notractColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnproveeNull() As Boolean
            Return Me.IsNull(Me.tablebalance3.nproveeColumn)
        End Function
        
        Public Sub SetnproveeNull()
            Me(Me.tablebalance3.nproveeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnotrpreNull() As Boolean
            Return Me.IsNull(Me.tablebalance3.notrpreColumn)
        End Function
        
        Public Sub SetnotrpreNull()
            Me(Me.tablebalance3.notrpreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsncreinsNull() As Boolean
            Return Me.IsNull(Me.tablebalance3.ncreinsColumn)
        End Function
        
        Public Sub SetncreinsNull()
            Me(Me.tablebalance3.ncreinsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnpatriNull() As Boolean
            Return Me.IsNull(Me.tablebalance3.npatriColumn)
        End Function
        
        Public Sub SetnpatriNull()
            Me(Me.tablebalance3.npatriColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsccodcliNull() As Boolean
            Return Me.IsNull(Me.tablebalance3.ccodcliColumn)
        End Function
        
        Public Sub SetccodcliNull()
            Me(Me.tablebalance3.ccodcliColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class balance3RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As balance3Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As balance3Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As balance3Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
