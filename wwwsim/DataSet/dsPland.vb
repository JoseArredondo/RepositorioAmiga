'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsPland
    Inherits DataSet
    
    Private tablePlan As PlanDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Plan")) Is Nothing) Then
                Me.Tables.Add(New PlanDataTable(ds.Tables("Plan")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Plan As PlanDataTable
        Get
            Return Me.tablePlan
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsPland = CType(MyBase.Clone,dsPland)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Plan")) Is Nothing) Then
            Me.Tables.Add(New PlanDataTable(ds.Tables("Plan")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablePlan = CType(Me.Tables("Plan"),PlanDataTable)
        If (Not (Me.tablePlan) Is Nothing) Then
            Me.tablePlan.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsPland"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsPland.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablePlan = New PlanDataTable
        Me.Tables.Add(Me.tablePlan)
    End Sub
    
    Private Function ShouldSerializePlan() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub PlanRowChangeEventHandler(ByVal sender As Object, ByVal e As PlanRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PlanDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnfecha As DataColumn
        
        Private columnOperacion As DataColumn
        
        Private columnN_Cuota As DataColumn
        
        Private columnCapital As DataColumn
        
        Private columnInteres As DataColumn
        
        Private columnSaldo As DataColumn
        
        Private columnGastos As DataColumn
        
        Friend Sub New()
            MyBase.New("Plan")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property fechaColumn As DataColumn
            Get
                Return Me.columnfecha
            End Get
        End Property
        
        Friend ReadOnly Property OperacionColumn As DataColumn
            Get
                Return Me.columnOperacion
            End Get
        End Property
        
        Friend ReadOnly Property N_CuotaColumn As DataColumn
            Get
                Return Me.columnN_Cuota
            End Get
        End Property
        
        Friend ReadOnly Property CapitalColumn As DataColumn
            Get
                Return Me.columnCapital
            End Get
        End Property
        
        Friend ReadOnly Property InteresColumn As DataColumn
            Get
                Return Me.columnInteres
            End Get
        End Property
        
        Friend ReadOnly Property SaldoColumn As DataColumn
            Get
                Return Me.columnSaldo
            End Get
        End Property
        
        Friend ReadOnly Property GastosColumn As DataColumn
            Get
                Return Me.columnGastos
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PlanRow
            Get
                Return CType(Me.Rows(index),PlanRow)
            End Get
        End Property
        
        Public Event PlanRowChanged As PlanRowChangeEventHandler
        
        Public Event PlanRowChanging As PlanRowChangeEventHandler
        
        Public Event PlanRowDeleted As PlanRowChangeEventHandler
        
        Public Event PlanRowDeleting As PlanRowChangeEventHandler
        
        Public Overloads Sub AddPlanRow(ByVal row As PlanRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPlanRow(ByVal fecha As Date, ByVal Operacion As String, ByVal N_Cuota As String, ByVal Capital As Decimal, ByVal Interes As Decimal, ByVal Saldo As Decimal, ByVal Gastos As Decimal) As PlanRow
            Dim rowPlanRow As PlanRow = CType(Me.NewRow,PlanRow)
            rowPlanRow.ItemArray = New Object() {fecha, Operacion, N_Cuota, Capital, Interes, Saldo, Gastos}
            Me.Rows.Add(rowPlanRow)
            Return rowPlanRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PlanDataTable = CType(MyBase.Clone,PlanDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PlanDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnfecha = Me.Columns("fecha")
            Me.columnOperacion = Me.Columns("Operacion")
            Me.columnN_Cuota = Me.Columns("N_Cuota")
            Me.columnCapital = Me.Columns("Capital")
            Me.columnInteres = Me.Columns("Interes")
            Me.columnSaldo = Me.Columns("Saldo")
            Me.columnGastos = Me.Columns("Gastos")
        End Sub
        
        Private Sub InitClass()
            Me.columnfecha = New DataColumn("fecha", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfecha)
            Me.columnOperacion = New DataColumn("Operacion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOperacion)
            Me.columnN_Cuota = New DataColumn("N_Cuota", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnN_Cuota)
            Me.columnCapital = New DataColumn("Capital", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCapital)
            Me.columnInteres = New DataColumn("Interes", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInteres)
            Me.columnSaldo = New DataColumn("Saldo", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldo)
            Me.columnGastos = New DataColumn("Gastos", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGastos)
        End Sub
        
        Public Function NewPlanRow() As PlanRow
            Return CType(Me.NewRow,PlanRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PlanRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PlanRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PlanRowChangedEvent) Is Nothing) Then
                RaiseEvent PlanRowChanged(Me, New PlanRowChangeEvent(CType(e.Row,PlanRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PlanRowChangingEvent) Is Nothing) Then
                RaiseEvent PlanRowChanging(Me, New PlanRowChangeEvent(CType(e.Row,PlanRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PlanRowDeletedEvent) Is Nothing) Then
                RaiseEvent PlanRowDeleted(Me, New PlanRowChangeEvent(CType(e.Row,PlanRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PlanRowDeletingEvent) Is Nothing) Then
                RaiseEvent PlanRowDeleting(Me, New PlanRowChangeEvent(CType(e.Row,PlanRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePlanRow(ByVal row As PlanRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PlanRow
        Inherits DataRow
        
        Private tablePlan As PlanDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePlan = CType(Me.Table,PlanDataTable)
        End Sub
        
        Public Property fecha As Date
            Get
                Try 
                    Return CType(Me(Me.tablePlan.fechaColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlan.fechaColumn) = value
            End Set
        End Property
        
        Public Property Operacion As String
            Get
                Try 
                    Return CType(Me(Me.tablePlan.OperacionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlan.OperacionColumn) = value
            End Set
        End Property
        
        Public Property N_Cuota As String
            Get
                Try 
                    Return CType(Me(Me.tablePlan.N_CuotaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlan.N_CuotaColumn) = value
            End Set
        End Property
        
        Public Property Capital As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePlan.CapitalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlan.CapitalColumn) = value
            End Set
        End Property
        
        Public Property Interes As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePlan.InteresColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlan.InteresColumn) = value
            End Set
        End Property
        
        Public Property Saldo As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePlan.SaldoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlan.SaldoColumn) = value
            End Set
        End Property
        
        Public Property Gastos As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePlan.GastosColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlan.GastosColumn) = value
            End Set
        End Property
        
        Public Function IsfechaNull() As Boolean
            Return Me.IsNull(Me.tablePlan.fechaColumn)
        End Function
        
        Public Sub SetfechaNull()
            Me(Me.tablePlan.fechaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOperacionNull() As Boolean
            Return Me.IsNull(Me.tablePlan.OperacionColumn)
        End Function
        
        Public Sub SetOperacionNull()
            Me(Me.tablePlan.OperacionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsN_CuotaNull() As Boolean
            Return Me.IsNull(Me.tablePlan.N_CuotaColumn)
        End Function
        
        Public Sub SetN_CuotaNull()
            Me(Me.tablePlan.N_CuotaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCapitalNull() As Boolean
            Return Me.IsNull(Me.tablePlan.CapitalColumn)
        End Function
        
        Public Sub SetCapitalNull()
            Me(Me.tablePlan.CapitalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInteresNull() As Boolean
            Return Me.IsNull(Me.tablePlan.InteresColumn)
        End Function
        
        Public Sub SetInteresNull()
            Me(Me.tablePlan.InteresColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSaldoNull() As Boolean
            Return Me.IsNull(Me.tablePlan.SaldoColumn)
        End Function
        
        Public Sub SetSaldoNull()
            Me(Me.tablePlan.SaldoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGastosNull() As Boolean
            Return Me.IsNull(Me.tablePlan.GastosColumn)
        End Function
        
        Public Sub SetGastosNull()
            Me(Me.tablePlan.GastosColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PlanRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PlanRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PlanRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PlanRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
