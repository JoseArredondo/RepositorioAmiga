'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsnopagos
    Inherits DataSet
    
    Private tableNopago As NopagoDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Nopago")) Is Nothing) Then
                Me.Tables.Add(New NopagoDataTable(ds.Tables("Nopago")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Nopago As NopagoDataTable
        Get
            Return Me.tableNopago
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsnopagos = CType(MyBase.Clone,dsnopagos)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Nopago")) Is Nothing) Then
            Me.Tables.Add(New NopagoDataTable(ds.Tables("Nopago")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableNopago = CType(Me.Tables("Nopago"),NopagoDataTable)
        If (Not (Me.tableNopago) Is Nothing) Then
            Me.tableNopago.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsnopagos"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsnopagos.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableNopago = New NopagoDataTable
        Me.Tables.Add(Me.tableNopago)
    End Sub
    
    Private Function ShouldSerializeNopago() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub NopagoRowChangeEventHandler(ByVal sender As Object, ByVal e As NopagoRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NopagoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnccodcta As DataColumn
        
        Private columnccodcli As DataColumn
        
        Private columncnomcli As DataColumn
        
        Private columnnmonto As DataColumn
        
        Private columnccodofi As DataColumn
        
        Private columncflag As DataColumn
        
        Private columncmotivo As DataColumn
        
        Friend Sub New()
            MyBase.New("Nopago")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ccodctaColumn As DataColumn
            Get
                Return Me.columnccodcta
            End Get
        End Property
        
        Friend ReadOnly Property ccodcliColumn As DataColumn
            Get
                Return Me.columnccodcli
            End Get
        End Property
        
        Friend ReadOnly Property cnomcliColumn As DataColumn
            Get
                Return Me.columncnomcli
            End Get
        End Property
        
        Friend ReadOnly Property nmontoColumn As DataColumn
            Get
                Return Me.columnnmonto
            End Get
        End Property
        
        Friend ReadOnly Property ccodofiColumn As DataColumn
            Get
                Return Me.columnccodofi
            End Get
        End Property
        
        Friend ReadOnly Property cflagColumn As DataColumn
            Get
                Return Me.columncflag
            End Get
        End Property
        
        Friend ReadOnly Property cmotivoColumn As DataColumn
            Get
                Return Me.columncmotivo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As NopagoRow
            Get
                Return CType(Me.Rows(index),NopagoRow)
            End Get
        End Property
        
        Public Event NopagoRowChanged As NopagoRowChangeEventHandler
        
        Public Event NopagoRowChanging As NopagoRowChangeEventHandler
        
        Public Event NopagoRowDeleted As NopagoRowChangeEventHandler
        
        Public Event NopagoRowDeleting As NopagoRowChangeEventHandler
        
        Public Overloads Sub AddNopagoRow(ByVal row As NopagoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddNopagoRow(ByVal ccodcta As String, ByVal ccodcli As String, ByVal cnomcli As String, ByVal nmonto As Decimal, ByVal ccodofi As String, ByVal cflag As String, ByVal cmotivo As String) As NopagoRow
            Dim rowNopagoRow As NopagoRow = CType(Me.NewRow,NopagoRow)
            rowNopagoRow.ItemArray = New Object() {ccodcta, ccodcli, cnomcli, nmonto, ccodofi, cflag, cmotivo}
            Me.Rows.Add(rowNopagoRow)
            Return rowNopagoRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As NopagoDataTable = CType(MyBase.Clone,NopagoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New NopagoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnccodcta = Me.Columns("ccodcta")
            Me.columnccodcli = Me.Columns("ccodcli")
            Me.columncnomcli = Me.Columns("cnomcli")
            Me.columnnmonto = Me.Columns("nmonto")
            Me.columnccodofi = Me.Columns("ccodofi")
            Me.columncflag = Me.Columns("cflag")
            Me.columncmotivo = Me.Columns("cmotivo")
        End Sub
        
        Private Sub InitClass()
            Me.columnccodcta = New DataColumn("ccodcta", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnccodcta)
            Me.columnccodcli = New DataColumn("ccodcli", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnccodcli)
            Me.columncnomcli = New DataColumn("cnomcli", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncnomcli)
            Me.columnnmonto = New DataColumn("nmonto", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnmonto)
            Me.columnccodofi = New DataColumn("ccodofi", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnccodofi)
            Me.columncflag = New DataColumn("cflag", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncflag)
            Me.columncmotivo = New DataColumn("cmotivo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncmotivo)
        End Sub
        
        Public Function NewNopagoRow() As NopagoRow
            Return CType(Me.NewRow,NopagoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New NopagoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(NopagoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NopagoRowChangedEvent) Is Nothing) Then
                RaiseEvent NopagoRowChanged(Me, New NopagoRowChangeEvent(CType(e.Row,NopagoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NopagoRowChangingEvent) Is Nothing) Then
                RaiseEvent NopagoRowChanging(Me, New NopagoRowChangeEvent(CType(e.Row,NopagoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NopagoRowDeletedEvent) Is Nothing) Then
                RaiseEvent NopagoRowDeleted(Me, New NopagoRowChangeEvent(CType(e.Row,NopagoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NopagoRowDeletingEvent) Is Nothing) Then
                RaiseEvent NopagoRowDeleting(Me, New NopagoRowChangeEvent(CType(e.Row,NopagoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveNopagoRow(ByVal row As NopagoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NopagoRow
        Inherits DataRow
        
        Private tableNopago As NopagoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableNopago = CType(Me.Table,NopagoDataTable)
        End Sub
        
        Public Property ccodcta As String
            Get
                Try 
                    Return CType(Me(Me.tableNopago.ccodctaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNopago.ccodctaColumn) = value
            End Set
        End Property
        
        Public Property ccodcli As String
            Get
                Try 
                    Return CType(Me(Me.tableNopago.ccodcliColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNopago.ccodcliColumn) = value
            End Set
        End Property
        
        Public Property cnomcli As String
            Get
                Try 
                    Return CType(Me(Me.tableNopago.cnomcliColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNopago.cnomcliColumn) = value
            End Set
        End Property
        
        Public Property nmonto As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableNopago.nmontoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNopago.nmontoColumn) = value
            End Set
        End Property
        
        Public Property ccodofi As String
            Get
                Try 
                    Return CType(Me(Me.tableNopago.ccodofiColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNopago.ccodofiColumn) = value
            End Set
        End Property
        
        Public Property cflag As String
            Get
                Try 
                    Return CType(Me(Me.tableNopago.cflagColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNopago.cflagColumn) = value
            End Set
        End Property
        
        Public Property cmotivo As String
            Get
                Try 
                    Return CType(Me(Me.tableNopago.cmotivoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNopago.cmotivoColumn) = value
            End Set
        End Property
        
        Public Function IsccodctaNull() As Boolean
            Return Me.IsNull(Me.tableNopago.ccodctaColumn)
        End Function
        
        Public Sub SetccodctaNull()
            Me(Me.tableNopago.ccodctaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsccodcliNull() As Boolean
            Return Me.IsNull(Me.tableNopago.ccodcliColumn)
        End Function
        
        Public Sub SetccodcliNull()
            Me(Me.tableNopago.ccodcliColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscnomcliNull() As Boolean
            Return Me.IsNull(Me.tableNopago.cnomcliColumn)
        End Function
        
        Public Sub SetcnomcliNull()
            Me(Me.tableNopago.cnomcliColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnmontoNull() As Boolean
            Return Me.IsNull(Me.tableNopago.nmontoColumn)
        End Function
        
        Public Sub SetnmontoNull()
            Me(Me.tableNopago.nmontoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsccodofiNull() As Boolean
            Return Me.IsNull(Me.tableNopago.ccodofiColumn)
        End Function
        
        Public Sub SetccodofiNull()
            Me(Me.tableNopago.ccodofiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscflagNull() As Boolean
            Return Me.IsNull(Me.tableNopago.cflagColumn)
        End Function
        
        Public Sub SetcflagNull()
            Me(Me.tableNopago.cflagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscmotivoNull() As Boolean
            Return Me.IsNull(Me.tableNopago.cmotivoColumn)
        End Function
        
        Public Sub SetcmotivoNull()
            Me(Me.tableNopago.cmotivoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NopagoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As NopagoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As NopagoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As NopagoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
