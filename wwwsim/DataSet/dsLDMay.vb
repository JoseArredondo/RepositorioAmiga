'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsLDMay
    Inherits DataSet
    
    Private tableLibro1 As Libro1DataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Libro1")) Is Nothing) Then
                Me.Tables.Add(New Libro1DataTable(ds.Tables("Libro1")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Libro1 As Libro1DataTable
        Get
            Return Me.tableLibro1
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsLDMay = CType(MyBase.Clone,dsLDMay)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Libro1")) Is Nothing) Then
            Me.Tables.Add(New Libro1DataTable(ds.Tables("Libro1")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableLibro1 = CType(Me.Tables("Libro1"),Libro1DataTable)
        If (Not (Me.tableLibro1) Is Nothing) Then
            Me.tableLibro1.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsLDMay"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsLDMay.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableLibro1 = New Libro1DataTable
        Me.Tables.Add(Me.tableLibro1)
    End Sub
    
    Private Function ShouldSerializeLibro1() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub Libro1RowChangeEventHandler(ByVal sender As Object, ByVal e As Libro1RowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Libro1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnccodcta As DataColumn
        
        Private columncdescrip As DataColumn
        
        Private columnnsalini As DataColumn
        
        Private columndfeccnt As DataColumn
        
        Private columncnumcom As DataColumn
        
        Private columnndebe As DataColumn
        
        Private columnnhaber As DataColumn
        
        Private columncglosa As DataColumn
        
        Private columnnsaldo As DataColumn
        
        Private columnnsalant As DataColumn
        
        Private columndfecini As DataColumn
        
        Private columndfecfin As DataColumn
        
        Friend Sub New()
            MyBase.New("Libro1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ccodctaColumn As DataColumn
            Get
                Return Me.columnccodcta
            End Get
        End Property
        
        Friend ReadOnly Property cdescripColumn As DataColumn
            Get
                Return Me.columncdescrip
            End Get
        End Property
        
        Friend ReadOnly Property nsaliniColumn As DataColumn
            Get
                Return Me.columnnsalini
            End Get
        End Property
        
        Friend ReadOnly Property dfeccntColumn As DataColumn
            Get
                Return Me.columndfeccnt
            End Get
        End Property
        
        Friend ReadOnly Property cnumcomColumn As DataColumn
            Get
                Return Me.columncnumcom
            End Get
        End Property
        
        Friend ReadOnly Property ndebeColumn As DataColumn
            Get
                Return Me.columnndebe
            End Get
        End Property
        
        Friend ReadOnly Property nhaberColumn As DataColumn
            Get
                Return Me.columnnhaber
            End Get
        End Property
        
        Friend ReadOnly Property cglosaColumn As DataColumn
            Get
                Return Me.columncglosa
            End Get
        End Property
        
        Friend ReadOnly Property nsaldoColumn As DataColumn
            Get
                Return Me.columnnsaldo
            End Get
        End Property
        
        Friend ReadOnly Property nsalantColumn As DataColumn
            Get
                Return Me.columnnsalant
            End Get
        End Property
        
        Friend ReadOnly Property dfeciniColumn As DataColumn
            Get
                Return Me.columndfecini
            End Get
        End Property
        
        Friend ReadOnly Property dfecfinColumn As DataColumn
            Get
                Return Me.columndfecfin
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Libro1Row
            Get
                Return CType(Me.Rows(index),Libro1Row)
            End Get
        End Property
        
        Public Event Libro1RowChanged As Libro1RowChangeEventHandler
        
        Public Event Libro1RowChanging As Libro1RowChangeEventHandler
        
        Public Event Libro1RowDeleted As Libro1RowChangeEventHandler
        
        Public Event Libro1RowDeleting As Libro1RowChangeEventHandler
        
        Public Overloads Sub AddLibro1Row(ByVal row As Libro1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddLibro1Row(ByVal ccodcta As String, ByVal cdescrip As String, ByVal nsalini As Double, ByVal dfeccnt As Date, ByVal cnumcom As String, ByVal ndebe As Double, ByVal nhaber As Double, ByVal cglosa As String, ByVal nsaldo As Double, ByVal nsalant As Double, ByVal dfecini As Date, ByVal dfecfin As Date) As Libro1Row
            Dim rowLibro1Row As Libro1Row = CType(Me.NewRow,Libro1Row)
            rowLibro1Row.ItemArray = New Object() {ccodcta, cdescrip, nsalini, dfeccnt, cnumcom, ndebe, nhaber, cglosa, nsaldo, nsalant, dfecini, dfecfin}
            Me.Rows.Add(rowLibro1Row)
            Return rowLibro1Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Libro1DataTable = CType(MyBase.Clone,Libro1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Libro1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnccodcta = Me.Columns("ccodcta")
            Me.columncdescrip = Me.Columns("cdescrip")
            Me.columnnsalini = Me.Columns("nsalini")
            Me.columndfeccnt = Me.Columns("dfeccnt")
            Me.columncnumcom = Me.Columns("cnumcom")
            Me.columnndebe = Me.Columns("ndebe")
            Me.columnnhaber = Me.Columns("nhaber")
            Me.columncglosa = Me.Columns("cglosa")
            Me.columnnsaldo = Me.Columns("nsaldo")
            Me.columnnsalant = Me.Columns("nsalant")
            Me.columndfecini = Me.Columns("dfecini")
            Me.columndfecfin = Me.Columns("dfecfin")
        End Sub
        
        Private Sub InitClass()
            Me.columnccodcta = New DataColumn("ccodcta", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnccodcta)
            Me.columncdescrip = New DataColumn("cdescrip", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncdescrip)
            Me.columnnsalini = New DataColumn("nsalini", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnsalini)
            Me.columndfeccnt = New DataColumn("dfeccnt", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndfeccnt)
            Me.columncnumcom = New DataColumn("cnumcom", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncnumcom)
            Me.columnndebe = New DataColumn("ndebe", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnndebe)
            Me.columnnhaber = New DataColumn("nhaber", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnhaber)
            Me.columncglosa = New DataColumn("cglosa", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncglosa)
            Me.columnnsaldo = New DataColumn("nsaldo", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnsaldo)
            Me.columnnsalant = New DataColumn("nsalant", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnsalant)
            Me.columndfecini = New DataColumn("dfecini", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndfecini)
            Me.columndfecfin = New DataColumn("dfecfin", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndfecfin)
        End Sub
        
        Public Function NewLibro1Row() As Libro1Row
            Return CType(Me.NewRow,Libro1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Libro1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Libro1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Libro1RowChangedEvent) Is Nothing) Then
                RaiseEvent Libro1RowChanged(Me, New Libro1RowChangeEvent(CType(e.Row,Libro1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Libro1RowChangingEvent) Is Nothing) Then
                RaiseEvent Libro1RowChanging(Me, New Libro1RowChangeEvent(CType(e.Row,Libro1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Libro1RowDeletedEvent) Is Nothing) Then
                RaiseEvent Libro1RowDeleted(Me, New Libro1RowChangeEvent(CType(e.Row,Libro1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Libro1RowDeletingEvent) Is Nothing) Then
                RaiseEvent Libro1RowDeleting(Me, New Libro1RowChangeEvent(CType(e.Row,Libro1Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveLibro1Row(ByVal row As Libro1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Libro1Row
        Inherits DataRow
        
        Private tableLibro1 As Libro1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableLibro1 = CType(Me.Table,Libro1DataTable)
        End Sub
        
        Public Property ccodcta As String
            Get
                Try 
                    Return CType(Me(Me.tableLibro1.ccodctaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLibro1.ccodctaColumn) = value
            End Set
        End Property
        
        Public Property cdescrip As String
            Get
                Try 
                    Return CType(Me(Me.tableLibro1.cdescripColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLibro1.cdescripColumn) = value
            End Set
        End Property
        
        Public Property nsalini As Double
            Get
                Try 
                    Return CType(Me(Me.tableLibro1.nsaliniColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLibro1.nsaliniColumn) = value
            End Set
        End Property
        
        Public Property dfeccnt As Date
            Get
                Try 
                    Return CType(Me(Me.tableLibro1.dfeccntColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLibro1.dfeccntColumn) = value
            End Set
        End Property
        
        Public Property cnumcom As String
            Get
                Try 
                    Return CType(Me(Me.tableLibro1.cnumcomColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLibro1.cnumcomColumn) = value
            End Set
        End Property
        
        Public Property ndebe As Double
            Get
                Try 
                    Return CType(Me(Me.tableLibro1.ndebeColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLibro1.ndebeColumn) = value
            End Set
        End Property
        
        Public Property nhaber As Double
            Get
                Try 
                    Return CType(Me(Me.tableLibro1.nhaberColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLibro1.nhaberColumn) = value
            End Set
        End Property
        
        Public Property cglosa As String
            Get
                Try 
                    Return CType(Me(Me.tableLibro1.cglosaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLibro1.cglosaColumn) = value
            End Set
        End Property
        
        Public Property nsaldo As Double
            Get
                Try 
                    Return CType(Me(Me.tableLibro1.nsaldoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLibro1.nsaldoColumn) = value
            End Set
        End Property
        
        Public Property nsalant As Double
            Get
                Try 
                    Return CType(Me(Me.tableLibro1.nsalantColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLibro1.nsalantColumn) = value
            End Set
        End Property
        
        Public Property dfecini As Date
            Get
                Try 
                    Return CType(Me(Me.tableLibro1.dfeciniColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLibro1.dfeciniColumn) = value
            End Set
        End Property
        
        Public Property dfecfin As Date
            Get
                Try 
                    Return CType(Me(Me.tableLibro1.dfecfinColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLibro1.dfecfinColumn) = value
            End Set
        End Property
        
        Public Function IsccodctaNull() As Boolean
            Return Me.IsNull(Me.tableLibro1.ccodctaColumn)
        End Function
        
        Public Sub SetccodctaNull()
            Me(Me.tableLibro1.ccodctaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscdescripNull() As Boolean
            Return Me.IsNull(Me.tableLibro1.cdescripColumn)
        End Function
        
        Public Sub SetcdescripNull()
            Me(Me.tableLibro1.cdescripColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnsaliniNull() As Boolean
            Return Me.IsNull(Me.tableLibro1.nsaliniColumn)
        End Function
        
        Public Sub SetnsaliniNull()
            Me(Me.tableLibro1.nsaliniColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdfeccntNull() As Boolean
            Return Me.IsNull(Me.tableLibro1.dfeccntColumn)
        End Function
        
        Public Sub SetdfeccntNull()
            Me(Me.tableLibro1.dfeccntColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscnumcomNull() As Boolean
            Return Me.IsNull(Me.tableLibro1.cnumcomColumn)
        End Function
        
        Public Sub SetcnumcomNull()
            Me(Me.tableLibro1.cnumcomColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsndebeNull() As Boolean
            Return Me.IsNull(Me.tableLibro1.ndebeColumn)
        End Function
        
        Public Sub SetndebeNull()
            Me(Me.tableLibro1.ndebeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnhaberNull() As Boolean
            Return Me.IsNull(Me.tableLibro1.nhaberColumn)
        End Function
        
        Public Sub SetnhaberNull()
            Me(Me.tableLibro1.nhaberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscglosaNull() As Boolean
            Return Me.IsNull(Me.tableLibro1.cglosaColumn)
        End Function
        
        Public Sub SetcglosaNull()
            Me(Me.tableLibro1.cglosaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnsaldoNull() As Boolean
            Return Me.IsNull(Me.tableLibro1.nsaldoColumn)
        End Function
        
        Public Sub SetnsaldoNull()
            Me(Me.tableLibro1.nsaldoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnsalantNull() As Boolean
            Return Me.IsNull(Me.tableLibro1.nsalantColumn)
        End Function
        
        Public Sub SetnsalantNull()
            Me(Me.tableLibro1.nsalantColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdfeciniNull() As Boolean
            Return Me.IsNull(Me.tableLibro1.dfeciniColumn)
        End Function
        
        Public Sub SetdfeciniNull()
            Me(Me.tableLibro1.dfeciniColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdfecfinNull() As Boolean
            Return Me.IsNull(Me.tableLibro1.dfecfinColumn)
        End Function
        
        Public Sub SetdfecfinNull()
            Me(Me.tableLibro1.dfecfinColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Libro1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Libro1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Libro1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Libro1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
