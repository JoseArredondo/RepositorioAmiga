'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsBalance
    Inherits DataSet
    
    Private tablebalance As balanceDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("balance")) Is Nothing) Then
                Me.Tables.Add(New balanceDataTable(ds.Tables("balance")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property balance As balanceDataTable
        Get
            Return Me.tablebalance
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsBalance = CType(MyBase.Clone,dsBalance)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("balance")) Is Nothing) Then
            Me.Tables.Add(New balanceDataTable(ds.Tables("balance")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablebalance = CType(Me.Tables("balance"),balanceDataTable)
        If (Not (Me.tablebalance) Is Nothing) Then
            Me.tablebalance.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsBalance"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsBalance.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablebalance = New balanceDataTable
        Me.Tables.Add(Me.tablebalance)
    End Sub
    
    Private Function ShouldSerializebalance() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub balanceRowChangeEventHandler(ByVal sender As Object, ByVal e As balanceRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class balanceDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnccodcta As DataColumn
        
        Private columncctasup As DataColumn
        
        Private columnnnivel01 As DataColumn
        
        Private columnnnivel02 As DataColumn
        
        Private columnnnivel03 As DataColumn
        
        Private columnnnivel04 As DataColumn
        
        Private columnnnivel05 As DataColumn
        
        Private columnnnivel06 As DataColumn
        
        Private columnccodto As DataColumn
        
        Private columncdescrip As DataColumn
        
        Private columncfecha As DataColumn
        
        Private columncnivel02 As DataColumn
        
        Private columncnivel03 As DataColumn
        
        Private columncnivel04 As DataColumn
        
        Private columncnivel05 As DataColumn
        
        Private columncnivel06 As DataColumn
        
        Friend Sub New()
            MyBase.New("balance")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ccodctaColumn As DataColumn
            Get
                Return Me.columnccodcta
            End Get
        End Property
        
        Friend ReadOnly Property cctasupColumn As DataColumn
            Get
                Return Me.columncctasup
            End Get
        End Property
        
        Friend ReadOnly Property nnivel01Column As DataColumn
            Get
                Return Me.columnnnivel01
            End Get
        End Property
        
        Friend ReadOnly Property nnivel02Column As DataColumn
            Get
                Return Me.columnnnivel02
            End Get
        End Property
        
        Friend ReadOnly Property nnivel03Column As DataColumn
            Get
                Return Me.columnnnivel03
            End Get
        End Property
        
        Friend ReadOnly Property nnivel04Column As DataColumn
            Get
                Return Me.columnnnivel04
            End Get
        End Property
        
        Friend ReadOnly Property nnivel05Column As DataColumn
            Get
                Return Me.columnnnivel05
            End Get
        End Property
        
        Friend ReadOnly Property nnivel06Column As DataColumn
            Get
                Return Me.columnnnivel06
            End Get
        End Property
        
        Friend ReadOnly Property ccodtoColumn As DataColumn
            Get
                Return Me.columnccodto
            End Get
        End Property
        
        Friend ReadOnly Property cdescripColumn As DataColumn
            Get
                Return Me.columncdescrip
            End Get
        End Property
        
        Friend ReadOnly Property cfechaColumn As DataColumn
            Get
                Return Me.columncfecha
            End Get
        End Property
        
        Friend ReadOnly Property cnivel02Column As DataColumn
            Get
                Return Me.columncnivel02
            End Get
        End Property
        
        Friend ReadOnly Property cnivel03Column As DataColumn
            Get
                Return Me.columncnivel03
            End Get
        End Property
        
        Friend ReadOnly Property cnivel04Column As DataColumn
            Get
                Return Me.columncnivel04
            End Get
        End Property
        
        Friend ReadOnly Property cnivel05Column As DataColumn
            Get
                Return Me.columncnivel05
            End Get
        End Property
        
        Friend ReadOnly Property cnivel06Column As DataColumn
            Get
                Return Me.columncnivel06
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As balanceRow
            Get
                Return CType(Me.Rows(index),balanceRow)
            End Get
        End Property
        
        Public Event balanceRowChanged As balanceRowChangeEventHandler
        
        Public Event balanceRowChanging As balanceRowChangeEventHandler
        
        Public Event balanceRowDeleted As balanceRowChangeEventHandler
        
        Public Event balanceRowDeleting As balanceRowChangeEventHandler
        
        Public Overloads Sub AddbalanceRow(ByVal row As balanceRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddbalanceRow( _
                    ByVal ccodcta As String,  _
                    ByVal cctasup As String,  _
                    ByVal nnivel01 As Double,  _
                    ByVal nnivel02 As Double,  _
                    ByVal nnivel03 As Double,  _
                    ByVal nnivel04 As Double,  _
                    ByVal nnivel05 As Double,  _
                    ByVal nnivel06 As Double,  _
                    ByVal ccodto As String,  _
                    ByVal cdescrip As String,  _
                    ByVal cfecha As String,  _
                    ByVal cnivel02 As String,  _
                    ByVal cnivel03 As String,  _
                    ByVal cnivel04 As String,  _
                    ByVal cnivel05 As String,  _
                    ByVal cnivel06 As String) As balanceRow
            Dim rowbalanceRow As balanceRow = CType(Me.NewRow,balanceRow)
            rowbalanceRow.ItemArray = New Object() {ccodcta, cctasup, nnivel01, nnivel02, nnivel03, nnivel04, nnivel05, nnivel06, ccodto, cdescrip, cfecha, cnivel02, cnivel03, cnivel04, cnivel05, cnivel06}
            Me.Rows.Add(rowbalanceRow)
            Return rowbalanceRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As balanceDataTable = CType(MyBase.Clone,balanceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New balanceDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnccodcta = Me.Columns("ccodcta")
            Me.columncctasup = Me.Columns("cctasup")
            Me.columnnnivel01 = Me.Columns("nnivel01")
            Me.columnnnivel02 = Me.Columns("nnivel02")
            Me.columnnnivel03 = Me.Columns("nnivel03")
            Me.columnnnivel04 = Me.Columns("nnivel04")
            Me.columnnnivel05 = Me.Columns("nnivel05")
            Me.columnnnivel06 = Me.Columns("nnivel06")
            Me.columnccodto = Me.Columns("ccodto")
            Me.columncdescrip = Me.Columns("cdescrip")
            Me.columncfecha = Me.Columns("cfecha")
            Me.columncnivel02 = Me.Columns("cnivel02")
            Me.columncnivel03 = Me.Columns("cnivel03")
            Me.columncnivel04 = Me.Columns("cnivel04")
            Me.columncnivel05 = Me.Columns("cnivel05")
            Me.columncnivel06 = Me.Columns("cnivel06")
        End Sub
        
        Private Sub InitClass()
            Me.columnccodcta = New DataColumn("ccodcta", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnccodcta)
            Me.columncctasup = New DataColumn("cctasup", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncctasup)
            Me.columnnnivel01 = New DataColumn("nnivel01", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnnivel01)
            Me.columnnnivel02 = New DataColumn("nnivel02", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnnivel02)
            Me.columnnnivel03 = New DataColumn("nnivel03", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnnivel03)
            Me.columnnnivel04 = New DataColumn("nnivel04", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnnivel04)
            Me.columnnnivel05 = New DataColumn("nnivel05", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnnivel05)
            Me.columnnnivel06 = New DataColumn("nnivel06", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnnivel06)
            Me.columnccodto = New DataColumn("ccodto", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnccodto)
            Me.columncdescrip = New DataColumn("cdescrip", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncdescrip)
            Me.columncfecha = New DataColumn("cfecha", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncfecha)
            Me.columncnivel02 = New DataColumn("cnivel02", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncnivel02)
            Me.columncnivel03 = New DataColumn("cnivel03", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncnivel03)
            Me.columncnivel04 = New DataColumn("cnivel04", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncnivel04)
            Me.columncnivel05 = New DataColumn("cnivel05", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncnivel05)
            Me.columncnivel06 = New DataColumn("cnivel06", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncnivel06)
            Me.Constraints.Add(New UniqueConstraint("dsBalanceKey1", New DataColumn() {Me.columnccodcta}, false))
            Me.columnccodcta.AllowDBNull = false
            Me.columnccodcta.Unique = true
        End Sub
        
        Public Function NewbalanceRow() As balanceRow
            Return CType(Me.NewRow,balanceRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New balanceRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(balanceRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.balanceRowChangedEvent) Is Nothing) Then
                RaiseEvent balanceRowChanged(Me, New balanceRowChangeEvent(CType(e.Row,balanceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.balanceRowChangingEvent) Is Nothing) Then
                RaiseEvent balanceRowChanging(Me, New balanceRowChangeEvent(CType(e.Row,balanceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.balanceRowDeletedEvent) Is Nothing) Then
                RaiseEvent balanceRowDeleted(Me, New balanceRowChangeEvent(CType(e.Row,balanceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.balanceRowDeletingEvent) Is Nothing) Then
                RaiseEvent balanceRowDeleting(Me, New balanceRowChangeEvent(CType(e.Row,balanceRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovebalanceRow(ByVal row As balanceRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class balanceRow
        Inherits DataRow
        
        Private tablebalance As balanceDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablebalance = CType(Me.Table,balanceDataTable)
        End Sub
        
        Public Property ccodcta As String
            Get
                Return CType(Me(Me.tablebalance.ccodctaColumn),String)
            End Get
            Set
                Me(Me.tablebalance.ccodctaColumn) = value
            End Set
        End Property
        
        Public Property cctasup As String
            Get
                Try 
                    Return CType(Me(Me.tablebalance.cctasupColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance.cctasupColumn) = value
            End Set
        End Property
        
        Public Property nnivel01 As Double
            Get
                Try 
                    Return CType(Me(Me.tablebalance.nnivel01Column),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance.nnivel01Column) = value
            End Set
        End Property
        
        Public Property nnivel02 As Double
            Get
                Try 
                    Return CType(Me(Me.tablebalance.nnivel02Column),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance.nnivel02Column) = value
            End Set
        End Property
        
        Public Property nnivel03 As Double
            Get
                Try 
                    Return CType(Me(Me.tablebalance.nnivel03Column),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance.nnivel03Column) = value
            End Set
        End Property
        
        Public Property nnivel04 As Double
            Get
                Try 
                    Return CType(Me(Me.tablebalance.nnivel04Column),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance.nnivel04Column) = value
            End Set
        End Property
        
        Public Property nnivel05 As Double
            Get
                Try 
                    Return CType(Me(Me.tablebalance.nnivel05Column),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance.nnivel05Column) = value
            End Set
        End Property
        
        Public Property nnivel06 As Double
            Get
                Try 
                    Return CType(Me(Me.tablebalance.nnivel06Column),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance.nnivel06Column) = value
            End Set
        End Property
        
        Public Property ccodto As String
            Get
                Try 
                    Return CType(Me(Me.tablebalance.ccodtoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance.ccodtoColumn) = value
            End Set
        End Property
        
        Public Property cdescrip As String
            Get
                Try 
                    Return CType(Me(Me.tablebalance.cdescripColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance.cdescripColumn) = value
            End Set
        End Property
        
        Public Property cfecha As String
            Get
                Try 
                    Return CType(Me(Me.tablebalance.cfechaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance.cfechaColumn) = value
            End Set
        End Property
        
        Public Property cnivel02 As String
            Get
                Try 
                    Return CType(Me(Me.tablebalance.cnivel02Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance.cnivel02Column) = value
            End Set
        End Property
        
        Public Property cnivel03 As String
            Get
                Try 
                    Return CType(Me(Me.tablebalance.cnivel03Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance.cnivel03Column) = value
            End Set
        End Property
        
        Public Property cnivel04 As String
            Get
                Try 
                    Return CType(Me(Me.tablebalance.cnivel04Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance.cnivel04Column) = value
            End Set
        End Property
        
        Public Property cnivel05 As String
            Get
                Try 
                    Return CType(Me(Me.tablebalance.cnivel05Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance.cnivel05Column) = value
            End Set
        End Property
        
        Public Property cnivel06 As String
            Get
                Try 
                    Return CType(Me(Me.tablebalance.cnivel06Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebalance.cnivel06Column) = value
            End Set
        End Property
        
        Public Function IscctasupNull() As Boolean
            Return Me.IsNull(Me.tablebalance.cctasupColumn)
        End Function
        
        Public Sub SetcctasupNull()
            Me(Me.tablebalance.cctasupColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isnnivel01Null() As Boolean
            Return Me.IsNull(Me.tablebalance.nnivel01Column)
        End Function
        
        Public Sub Setnnivel01Null()
            Me(Me.tablebalance.nnivel01Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isnnivel02Null() As Boolean
            Return Me.IsNull(Me.tablebalance.nnivel02Column)
        End Function
        
        Public Sub Setnnivel02Null()
            Me(Me.tablebalance.nnivel02Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isnnivel03Null() As Boolean
            Return Me.IsNull(Me.tablebalance.nnivel03Column)
        End Function
        
        Public Sub Setnnivel03Null()
            Me(Me.tablebalance.nnivel03Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isnnivel04Null() As Boolean
            Return Me.IsNull(Me.tablebalance.nnivel04Column)
        End Function
        
        Public Sub Setnnivel04Null()
            Me(Me.tablebalance.nnivel04Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isnnivel05Null() As Boolean
            Return Me.IsNull(Me.tablebalance.nnivel05Column)
        End Function
        
        Public Sub Setnnivel05Null()
            Me(Me.tablebalance.nnivel05Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isnnivel06Null() As Boolean
            Return Me.IsNull(Me.tablebalance.nnivel06Column)
        End Function
        
        Public Sub Setnnivel06Null()
            Me(Me.tablebalance.nnivel06Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsccodtoNull() As Boolean
            Return Me.IsNull(Me.tablebalance.ccodtoColumn)
        End Function
        
        Public Sub SetccodtoNull()
            Me(Me.tablebalance.ccodtoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscdescripNull() As Boolean
            Return Me.IsNull(Me.tablebalance.cdescripColumn)
        End Function
        
        Public Sub SetcdescripNull()
            Me(Me.tablebalance.cdescripColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscfechaNull() As Boolean
            Return Me.IsNull(Me.tablebalance.cfechaColumn)
        End Function
        
        Public Sub SetcfechaNull()
            Me(Me.tablebalance.cfechaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscnivel02Null() As Boolean
            Return Me.IsNull(Me.tablebalance.cnivel02Column)
        End Function
        
        Public Sub Setcnivel02Null()
            Me(Me.tablebalance.cnivel02Column) = System.Convert.DBNull
        End Sub
        
        Public Function Iscnivel03Null() As Boolean
            Return Me.IsNull(Me.tablebalance.cnivel03Column)
        End Function
        
        Public Sub Setcnivel03Null()
            Me(Me.tablebalance.cnivel03Column) = System.Convert.DBNull
        End Sub
        
        Public Function Iscnivel04Null() As Boolean
            Return Me.IsNull(Me.tablebalance.cnivel04Column)
        End Function
        
        Public Sub Setcnivel04Null()
            Me(Me.tablebalance.cnivel04Column) = System.Convert.DBNull
        End Sub
        
        Public Function Iscnivel05Null() As Boolean
            Return Me.IsNull(Me.tablebalance.cnivel05Column)
        End Function
        
        Public Sub Setcnivel05Null()
            Me(Me.tablebalance.cnivel05Column) = System.Convert.DBNull
        End Sub
        
        Public Function Iscnivel06Null() As Boolean
            Return Me.IsNull(Me.tablebalance.cnivel06Column)
        End Function
        
        Public Sub Setcnivel06Null()
            Me(Me.tablebalance.cnivel06Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class balanceRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As balanceRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As balanceRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As balanceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
